// This script is used to search the synaptic parameter space of the IS3 model by varying the number of excitatory and inhibitory synapses as well as their presynaptic spike rates

load_file("nrngui.hoc")
load_file("IS3_M2_Case8StarRevised.hoc") // Loads IS3 model with full morphology & properties (as well as parameters and point processes)
		
SRexcsyncount = 0
SLMexcsyncount = 0
inhsyncount = 0
count = 0 // for indexing purposes to do with the input vectors
for (dendn = 0; dendn<=57; dendn = dendn+1){
	print "Section Number: ", dendn_vec.x[dendn]
			
	for (i = 1; i<=dend[dendn].nseg; i = i+1) {
		if (dendn > 17 && dendn < 23) { // Skip putting synapses on axonal segments
			count = count + 1
		 	break
		}
	
		// Specifies proportion along section (i.e. from 0 to 1)
		prop = ((dend[dendn].L/dend[dendn].nseg)*i - (dend[dendn].L/dend[dendn].nseg)/2)/dend[dendn].L // finds the center of each segment, as defined by its proportional distance along each section; (prop = (i-0.5)/dend[dendn].nseg also works)
			
		// Assign optimized synapse parameter values to 9 excitatory synapses on the compartment if in SR
		if (distance(prop)<=300) {
			access dend[dendn]
			for (l = 1; l<=9; l = l + 1){
				SRexcsynapses[SRexcsyncount] = new Exp2Syn(prop)
				dend[dendn] SRexcsynapses[SRexcsyncount].loc(prop) // assign to current compartment
				SRexcsynapses[SRexcsyncount].tau1 = risetime_vec.x[count]
				SRexcsynapses[SRexcsyncount].tau2 = decaytime_vec.x[count]
				SRexcsynapses[SRexcsyncount].e = 0
				SRexcnss[SRexcsyncount] = new VecStim(prop)
				SRexcncs[SRexcsyncount] = new NetCon(SRexcnss[SRexcsyncount], SRexcsynapses[SRexcsyncount])
				SRexcncs[SRexcsyncount].weight = minweight_vec.x[count]
				SRexcsyncount = SRexcsyncount + 1
			}
		}		
		
		// Assign optimized synapse parameter values to 9 excitatory synapses on the compartment if in SLM
		if (distance(prop)>300) { // i.e. if greater than 300 um away from soma
			access dend[dendn]
			for (l = 1; l<=9; l = l + 1){
				SLMexcsynapses[SLMexcsyncount] = new Exp2Syn(prop)
				dend[dendn] SLMexcsynapses[SLMexcsyncount].loc(prop) // assign to current compartment
				SLMexcsynapses[SLMexcsyncount].tau1 = risetime_vec.x[count]
				SLMexcsynapses[SLMexcsyncount].tau2 = decaytime_vec.x[count]
				SLMexcsynapses[SLMexcsyncount].e = 0
				SLMexcnss[SLMexcsyncount] = new VecStim(prop)
				SLMexcncs[SLMexcsyncount] = new NetCon(SLMexcnss[SLMexcsyncount], SLMexcsynapses[SLMexcsyncount])
				SLMexcncs[SLMexcsyncount].weight = minweight_vec.x[count]
				SLMexcsyncount = SLMexcsyncount + 1
			}
		}
		
		// Assign optimized synapse parameter values to 2 inhibitory synapses on the compartment
		for (m = 1; m<=2; m = m + 1){
			inhsynapses[inhsyncount] = new Exp2Syn(prop)
			dend[dendn] inhsynapses[inhsyncount].loc(prop) // assign to current compartment
			inhsynapses[inhsyncount].tau1 = risetimeinh_vec.x[count]
			inhsynapses[inhsyncount].tau2 = decaytimeinh_vec.x[count]
			inhsynapses[inhsyncount].e = -70
			inhnss[inhsyncount] = new VecStim(prop)
			inhncs[inhsyncount] = new NetCon(inhnss[inhsyncount], inhsynapses[inhsyncount])
			inhncs[inhsyncount].weight = minweightinh_vec.x[count]
			inhsyncount = inhsyncount + 1
		}
		count = count + 1		
	}	
}
// Generate randomized indexing for random synapse selection
objref r, randSRexcindex, randSLMexcindex, randinhindex
proc randomize_syns() {
	r = new Random($1*10 + $2) // Ensures different random seeds for each example and example repeat
	randSRexcindex = new Vector(nSRexcsyns)
	randSLMexcindex = new Vector(nSLMexcsyns)
	randinhindex = new Vector(ninhsyns)
	tempindex = 0
	repeats = 1 // Initialize at 1 so it does skip the while loop
	for (i = 0; i < nSRexcsyns; i = i + 1){
		while (repeats > 0){
			repeats = 0 // Reset the count of repeats to 0 for next iteration
			tempindex = r.discunif(-1, nSRexcsyns-1) // Generate random integer
			for k=0,nSRexcsyns-1 repeats = repeats + (tempindex == randSRexcindex.x[k]) // Check if value repeats (i.e. if repeats > 0)
		}
		randSRexcindex.x[i] = tempindex // Assign value if not repeated
		repeats = 1 // Re-initialize to 1 so it doesn't skip while loop
	}
	tempindex = 0
	repeats = 1 // Initialize at 1 so it does skip the while loop
	for (i = 0; i < nSLMexcsyns; i = i + 1){
		while (repeats > 0){
			repeats = 0 // Reset the count of repeats to 0 for next iteration
			tempindex = r.discunif(-1, nSLMexcsyns-1) // Generate random integer
			for k=0,nSLMexcsyns-1 repeats = repeats + (tempindex == randSLMexcindex.x[k]) // Check if value repeats (i.e. if repeats > 0)
		}
		randSLMexcindex.x[i] = tempindex // Assign value if not repeated
		repeats = 1 // Re-initialize to 1 so it doesn't skip while loop
	}
	tempindex = 0
	repeats = 1 // Initialize at 1 so it does skip the while loop
	for (i = 0; i < ninhsyns; i = i + 1){
		while (repeats > 0){
			repeats = 0 // Reset the count of repeats to 0 for next iteration
			tempindex = r.discunif(-1, ninhsyns-1) // Generate random integer
			for k=0,ninhsyns-1 repeats = repeats + (tempindex == randinhindex.x[k]) // Check if value repeats (i.e. if repeats > 0)
		}
		randinhindex.x[i] = tempindex // Assign value if not repeated
		repeats = 1 // Re-initialize to 1 so it doesn't skip while loop
	}
}

access soma
// Record presynaptic events at all synapses. 
// Note that rexcvec & rinhvec values should be the same as excprespiketrains & inhprespiketrains values.
objectvar SRexcprespiketrains[nSRexcsyns], SLMexcprespiketrains[nSLMexcsyns], inhprespiketrains[ninhsyns]
	
for i=0,nSRexcsyns-1 SRexcprespiketrains[i] = new Vector()
for i=0,nSLMexcsyns-1 SLMexcprespiketrains[i] = new Vector()
for i=0,ninhsyns-1 inhprespiketrains[i] = new Vector()
	
for i=0,nSRexcsyns-1 SRexcncs[i].record(SRexcprespiketrains[i])
for i=0,nSLMexcsyns-1 SLMexcncs[i].record(SLMexcprespiketrains[i])
for i=0,ninhsyns-1 inhncs[i].record(inhprespiketrains[i])

// Create random uniform sample for spikes times
objectvar rSRexc, rSRexcvec, rSLMexc, rSLMexcvec, rinh, rinhvec, frecSRExcPreSpikeTrains, frecSLMExcPreSpikeTrains, frecInhPreSpikeTrains, rSRexcMat, rSLMexcMat, rinhMat, apc, apctimes

proc f() {
	rSRexc = new Random($8*10+$9+28293) // Ensures different random seeds on each iteration
	rSRexc.uniform(0,tstop)
	rSLMexc = new Random($8*10+$9+51234)
	rSLMexc.uniform(0,tstop)
	rinh = new Random($8*10+$9+81221)
	rinh.uniform(0,tstop)
	
	inhsyncount = $1
	excsyncount = $2
	inhsynspikes = $3
	excSRsynspikes = $4
	excSLMsynspikes = $4
	SaveExample = $5
	nexccommon = $6
	ninhcommon = $7

	// Re-initialize all inhibitory synapses such that they are silent when starting a new iteration
	rinhvec = new Vector(0)
	for i=0,ninhsyns-1 inhnss[randinhindex.x[i]].play(rinhvec)
	
	// Re-initialize all excitatory synapses such that they are silent when starting a new iteration
	rSRexcvec = new Vector(0)
	for i=0,nSRexcsyns-1 SRexcnss[randSRexcindex.x[i]].play(rSRexcvec)
	rSLMexcvec = new Vector(0)
	for i=0,nSLMexcsyns-1 SLMexcnss[randSLMexcindex.x[i]].play(rSLMexcvec)
	
	// Assign excitatory spike times
	if (excSRsynspikes > 0 && excSLMsynspikes > 0) {
		rSRexcMat = new Matrix(int((excsyncount)/2),excSRsynspikes)
		rSLMexcMat = new Matrix(int((excsyncount)/2),excSLMsynspikes)
		for (i=0; i < int((excsyncount)/2); i = i + 1){ // On each iteration add 1 SR and 1 SLM excitatory synapse
	
			// Sample new spike times for common inputs
			rSRexcvec = new Vector(excSRsynspikes)
			rSRexcvec.setrand(rSRexc)
			rSRexcvec.sort()
			rSLMexcvec = new Vector(excSLMsynspikes)
			rSLMexcvec.setrand(rSLMexc)
			rSLMexcvec.sort()

			xcom = 1
			// Common input loop where synapses are given the same input until the maximum number of common inputs is passed
			while (xcom <= nexccommon && i < int((excsyncount)/2) && i < nSLMexcsyns && i < nSRexcsyns) {
		
				// Add SR excitatory inputs
				SRexcnss[randSRexcindex.x[i]].play(rSRexcvec)
				for k=0,excSRsynspikes-1 rSRexcMat.x[i][k] = rSRexcvec.x[k]
		
				// Add SLM excitatory inputs and if out of SLM synapses add SR inputs intead
				SLMexcnss[randSLMexcindex.x[i]].play(rSLMexcvec)
				for k=0,excSLMsynspikes-1 rSLMexcMat.x[i][k] = rSLMexcvec.x[k]
	
				i = i + 1 // update indexing
				xcom = xcom + 1
			}
			i = i - 1 // i.e. so that i does not get updated twice resulting in skipped synapses
		}
	}

	// Assign inhibitory spike times
	if (inhsynspikes > 0){
		rinhMat = new Matrix(inhsyncount,inhsynspikes)
		for (i=0; i < inhsyncount; i = i + 1){ 
			rinhvec = new Vector(inhsynspikes)
			rinhvec.setrand(rinh) 
			rinhvec.sort()

			xcom = 1
			while (xcom <= ninhcommon && i < inhsyncount) {
				inhnss[randinhindex.x[i]].play(rinhvec)
				// Build Spike Time Matrix
				for k=0,inhsynspikes-1 rinhMat.x[i][k] = rinhvec.x[k]

				i = i + 1
				xcom = xcom + 1
			}
			i = i - 1 // i.e. so that i does not get updated twice resulting in skipped synapses
		}
	}
	
	if (SaveExample==1){
		// Save Excitatory Raster Matrices
		sprint(filename4,"SRExcPreSpikeTrains_%g_NumInh_%g_NumExc_%g_InhSpikes_%g_ExcSRSpikes_%g_ExcSLMSpikes_%g_NumExcCommon_%g_NumInhCommon.dat",inhsyncount,excsyncount,inhsynspikes,excSRsynspikes,excSLMsynspikes,nexccommon,ninhcommon)
		frecSRExcPreSpikeTrains = new File(filename4)
		frecSRExcPreSpikeTrains.wopen(filename4)
		if (excSRsynspikes > 0) {
			rSRexcMat.fprint(frecSRExcPreSpikeTrains,"%f\t") // Spike times sampled from random distribution
		}
		frecSRExcPreSpikeTrains.close()

		sprint(filename7,"SLMExcPreSpikeTrains_%g_NumInh_%g_NumExc_%g_InhSpikes_%g_ExcSRSpikes_%g_ExcSLMSpikes_%g_NumExcCommon_%g_NumInhCommon.dat",inhsyncount,excsyncount,inhsynspikes,excSRsynspikes,excSLMsynspikes,nexccommon,ninhcommon)
		frecSLMExcPreSpikeTrains = new File(filename7)
		frecSLMExcPreSpikeTrains.wopen(filename7)
		if (excSLMsynspikes > 0) {
			rSLMexcMat.fprint(frecSLMExcPreSpikeTrains,"%f\t") // Spike times sampled from random distribution
		}
		frecSLMExcPreSpikeTrains.close()

		// Save Inhibitory Raster Matrix
		sprint(filename5,"InhPreSpikeTrains_%g_NumInh_%g_NumExc_%g_InhSpikes_%g_ExcSRSpikes_%g_ExcSLMSpikes_%g_NumExcCommon_%g_NumInhCommon.dat",inhsyncount,excsyncount,inhsynspikes,excSRsynspikes,excSLMsynspikes,nexccommon,ninhcommon)
		frecInhPreSpikeTrains = new File(filename5)
		frecInhPreSpikeTrains.wopen(filename5)
		if (inhsynspikes > 0){
			rinhMat.fprint(frecInhPreSpikeTrains,"%f\t") // Spike times sampled from random distribution
		}
		frecInhPreSpikeTrains.close()
		
		apc = new APCount(0.5)
		apctimes = new Vector()
		apc.thresh = -20
		apc.record(apctimes)
		
		// Run Simulation and Record Vm Vector
		recV = new Vector()
		recV.record(&soma.v(0.5))
		run()
		sprint(filename1,"model_%g_NumInh_%g_NumExc_%g_InhSpikes_%g_ExcSRSpikes_%g_ExcSLMSpikes_%g_NumExcCommon_%g_NumInhCommon.dat",inhsyncount,excsyncount,inhsynspikes,excSRsynspikes,excSLMsynspikes,nexccommon,ninhcommon)
		frecV = new File(filename1)
		frecV.wopen(filename1)
		recV.vwrite(frecV) // Use printf instead of vwrite if you want a text file instead of a binary file
		frecV.close()
	}else{
		apc = new APCount(0.5)
		apctimes = new Vector()
		apc.thresh = -20
		apc.record(apctimes)
		
		// Run Simulation and Record Vm Vector
		recV = new Vector()
		recV.record(&soma.v(0.5))
		run()
	}
}

// Note that this script runs a simulation of the full morphology IS3 model at increasing current injection values. A voltage vector data file is created in each iteration.

load_file("nrngui.hoc")
load_file("IS3_M2_Dendritic50um.ses") // Loads IS3 model with full morphology & properties

access soma

// Initialize variables
tstop = 3000 // (ms)
objectvar stim
objref recVS
objref recVD1
objref recVD2
objref recVD3
objref recVD4
objref recVD5
Case = 8

objref fok
objref fdist
strdef filename
strdef filename2
strdef MODEL_TOPDIR
MODEL_TOPDIR = "/Users/sandygm5/Desktop/Simulation\ Dendritic\ Recordings/Recordings"
strdef model_abs_path
strdef model_abs_path2

// Set conductance values

ka = 0.05
kdrf = 0.3
nat = 0.07
naper = 0.0001 
		
forsec somatic {
gbar_Ika = ka
gksoma_Ksoma = kdrf
gna_Nasoma = nat
gbar_nap = naper
}
forsec Dendrites {
gbar_Ika = 0
gksoma_Ksoma = 0
gna_Nasoma = 0	
}

objref Dendrites_x
proc biophys_inhomo() {
  // Path Length from root with no translation
  //   and no normalization ranges from 0 to 501.122
  Dendrites_x = new SubsetDomainIterator(Dendrites, 0, 0, 0)
  gbar_Ika_Dendrites_x()
  gksoma_Ksoma_Dendrites_x()
  gna_Nasoma_Dendrites_x()
}
proc gbar_Ika_Dendrites_x() {local x, p, p0, p1, A0, A, k, d
  Dendrites_x.update()
  p0 = Dendrites_x.p0  p1 = Dendrites_x.p1
  A0 = ka
  A = -ka
  k = 10
  d = 55
  for Dendrites_x.loop() {
    x = Dendrites_x.x  p = Dendrites_x.p
    gbar_Ika(x) = A0 + A/(1 + exp(k*(d - p)))
  }
}
proc gksoma_Ksoma_Dendrites_x() {local x, p, p0, p1, A0, A, k, d
  Dendrites_x.update()
  p0 = Dendrites_x.p0  p1 = Dendrites_x.p1
  A0 = kdrf
  A = -kdrf
  k = 10
  d = 55
  for Dendrites_x.loop() {
    x = Dendrites_x.x  p = Dendrites_x.p
    gksoma_Ksoma(x) = A0 + A/(1 + exp(k*(d - p)))
  }
}
proc gna_Nasoma_Dendrites_x() {local x, p, p0, p1, A0, A, k, d
  Dendrites_x.update()
  p0 = Dendrites_x.p0  p1 = Dendrites_x.p1
  A0 = nat
  A = -nat
  k = 10
  d = 55
  for Dendrites_x.loop() {
    x = Dendrites_x.x  p = Dendrites_x.p
    gna_Nasoma(x) = A0 + A/(1 + exp(k*(d - p)))
  }
}
stim = new IClamp(0.5)
stim.del = 250
stim.dur = 2
stim.amp = 0.8

// Records voltage vector
recVS= new Vector()
recVS.record(&soma.v(0.5))
recVD1= new Vector()
recVD1.record(&dend.v(0.01))
recVD2= new Vector()
recVD2.record(&dend.v(0.5))
recVD3= new Vector()
recVD3.record(&dend.v(1))
recVD4= new Vector()
recVD4.record(&dend[2].v(0.5))
recVD5= new Vector()
recVD5.record(&dend[2].v(1))

// Runs a simulation of the model
init()
run()

// Store vectors into files
sprint(filename, "model_%g_Case_Apical50umDendriteRecordings.dat",Case)
sprint(model_abs_path, "%s/%s", MODEL_TOPDIR, filename)
fok = new File(filename)
fok.wopen(model_abs_path)
recVS.printf(fok) // Use printf instead of vwrite if you want a text file instead of a binary file
recVD1.printf(fok)
recVD2.printf(fok)
recVD3.printf(fok)
recVD4.printf(fok)
recVD5.printf(fok)
fok.close()
	
access dend[3]
distance()

objref distances
distances = new Vector(6, 0)
distances.x[0] = distance(0)
distances.x[1] = distance(0.01)
distances.x[2] = distance(0.25)
distances.x[3] = distance(0.5)
distances.x[4] = distance(0.75)
distances.x[5] = distance(1)

sprint(filename2, "model_%g_Case_Apical50umDistances.dat",Case)
sprint(model_abs_path2, "%s/%s", MODEL_TOPDIR, filename2)
fdist = new File(filename2)
fdist.wopen(model_abs_path2)
distances.printf(fdist)
fdist.close()
	
